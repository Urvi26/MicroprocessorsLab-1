#include <xc.inc>
	
global	DAC_Setup, DAC_Int_Hi, DAC_delay_x4us
    
psect	udata_acs   
DAC_cnt_l:	ds  1
DAC_cnt_h:	ds  1
clock_sec:	ds  1
clock_min:	ds 1
clock_hrs:	ds 1
check_60: ds	1
check_24: ds 1
psect	dac_code, class=CODE
	
    
clock_setup: 
	movlw  0x00
	movwf   clock_sec
	movwf   clock_min
	movwf   clock_hrs
	movlw	0x3C
	movwf	check_60
	movlw	0x18
	movwf	check_24
    
clock_inc:	
	incf	clock_sec
	movf	clock_sec, W
	cpfseq	check_60
	return
	clrf	clock_sec
	incf	clock_min
	movf	clock_min, W
	cpfseq	check_60
	return
	clrf	clock_min
	incf	clock_hrs
	movf	clock_hrs, W
	cpfseq	check_24
	return
	clrf	clock_hrs
	return

Clock_Int:	
	btfss	TMR0IF		; check that this is timer0 interrupt
	retfie	f		; if not then return
	call	clock_inc	; increment PORTJ
	bcf	TMR0IF		; clear interrupt flag
	retfie	f		; fast return from interrupt

DAC_Setup:
	clrf	TRISD, A	; Set PORTD as all outputs
	clrf	TRISJ, A	; Set PORTJ as all outputs
	clrf	LATJ, A		; Clear PORTJ outputs
	movlw	10000111B	; Set timer1 to 16-bit, Fosc/4/256
	movwf	T0CON, A	; = 62.5KHz clock rate, approx 1sec rollover
	movlw	0x0B
	movwf	TMR0H, A
	movlw	0xDB
	movwf	TMR0L, A
	bsf	TMR0IE		; Enable timer0 interrupt
	bsf	GIE		; Enable all interrupts
	return

wr:	bsf	LATD, 0	
	movlw	10
	call	DAC_delay_x4us
	bcf	LATD, 0	
	movlw	10
	call	DAC_delay_x4us
	return	
	
DAC_delay_x4us:
	movwf	DAC_cnt_l, A
	swapf	DAC_cnt_l, F, A
	movlw	0x0f
	andwf	DAC_cnt_l, W, A
	movwf	DAC_cnt_h, A
	movlw	0xf0
	andwf	DAC_cnt_l, F, A
	call	DAC_delay
	return

DAC_delay:
	movlw	0x00
daclp1:	decf	DAC_cnt_l, F, A
	subwfb	DAC_cnt_h, F, A
	bc	daclp1
	return
	
    end
