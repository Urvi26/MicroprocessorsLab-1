
    #include <xc.inc>
    
extrn	UART_Setup, UART_Transmit_Message  ; external subroutines
extrn	LCD_Setup, LCD_Write_Message, LCD_clear, LCD_set_pos, LCD_Send_Byte_D,LCD_Write_Hex
;extrn	ADC_Setup, ADC_Read 
 
    psect	udata_acs   ; reserve data space in access ram
counter:    ds 1    ; reserve one byte for a counter variable
delay_count:ds 1    ; reserve one byte for counter in the delay routine
    
    psect   code,abs
   
main:	org 0x00
	goto setup
	org 0x100
	
setup:	bcf	CFGS	; point to Flash program memory  
	bsf	EEPGD 	; access Flash program memory
	call LCD_Setup
	call UART_Setup
	
	goto start
	
start:  movlw	0x8A	;least sig byte of first number
	movwf	0x10
	movlw	0x41	;most sig byte of first number
	movwf	0x11
	movlw	0xD2	;least sig byte of second number
	movwf	0x12
	movlw	0x04	;most sig byte of second number
	movwf	0x13
	call  multiply16x16
	
	    ;write product to LCD;
	movlw	40
	call	LCD_Write_Hex
	movlw	41
	call	LCD_Write_Hex
	movlw	42
	call	LCD_Write_Hex
	movlw	43
	call	LCD_Write_Hex
	
	
	goto $
	
multiply16x16_40to43:	
	
	    ;multiplying least sig byte of first number with second number;
	movff	0x12, 0x20  ;least sig byte of second number
	movff	0x13, 0x21  ;most sig byte of second number   
	movf	0x10, W		;least sig byte of first number into W
	call	multiply16x8	;multiply 
	movff	0x30, 0x40	;store product in file registers
	movff	0x31, 0x41
	movff	0x32, 0x42
	
	    ;multiplying most sig byte of first number with second number;
	    
	movf	0x11, W		;most sig byte of first number
	call	multiply16x8	;multiply
	movff	0x30, 0x43	;store product in file registers
	movff	0x31, 0x44
	movff	0x31, 0x45
	
	    ;adding the two products to get final product;
	    
	movf	0x43, W	     
	addwf	0x41, 1, 0	;adding second most sig byte of first product with least sig byte of second prod

	movlw	0x44
	addwfc	0x42, 1, 0  ;adding most sig byte of first product with second least sig byte of second prod, with carry
	
	movlw	0x00
	addwfc	0x45, 0, 0  ;add carry to most sig byte of second prod
	movwf	0x43	    ;move to file reg 0x43 from 0x45 so final prod is 0x40,0x41,0x42,0x43
	
    
multiply16x8_30to32:	
    
	    ;multiplying 8bit number with least sig byte of 16bit number
	mulwf	0x20	    ;multiply W with 0x20
	movff	PRODL, 0x30 ;store product in file registers
	movff	PRODH, 0x31
	
	    ;multiplying 8 bit number with most sig byte of 16 bit number
	mulwf	0x21	;multiply W with 0x21
	movff	PRODL, 0x32
	movff	PRODH, 0x33
	
	    ;adding products together to get final product;
	movf	0x32, W
	addwf	0x31, 1, 0  ; add most sig of first product with least sig of second product and store in 0x21
	
	movlw	0x00
	addwfc	0x33, 0, 0  ;add carry bit to most sig bit of second product and store in 0x23
	movwf	0x32	    ;move 0x33 to 0x32 so that answer is 0x30,0x31,0x32
	
end main
